name: ci-build-rs485

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

jobs:
  build:
    env:
      CMAKE_DIR: build
      RELEASE_DIR: "release"
      RELEASE_HL_DIR: "HLApp/bin"
      RELEASE_RT_DIR: "RTApp/bin"
      RELEASE_INIT_DIR: "InitFW/"
      RELEASE_HW_DIR: "HW"
      ARM_TOOLCHAIN_URL: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2"
      ARV: "6"
      ARV_INIT: "6"
      BUILD_TYPE: "Debug"
      HL_PROJECT_DIR: "Firmware/HLApp/Cactusphere_100/atmarktechno_RS485_model"
      RT_PROJECT_DIR: "Firmware/RTApp/RS485"
      INIT_PROJECT_DIR_HL: "InitialFirmware/RS485InitialFirmware/HLApp"
      INIT_PROJECT_DIR_RT: "InitialFirmware/RS485InitialFirmware/RTApp"
      HWDEF_DIR: "Firmware/HLApp/Cactusphere_100/Hardware/mt3620"
      HL_ELF: "HLApp_Cactusphere_100.out"
      RT_ELF: "RS485_RTApp.out"
      INIT_ELF_HL: "RS485InitialFirmware_HLApp.imagepackage"
      INIT_ELF_RT: "RS485InitialFirmware_RTApp.imagepackage"
      HWDEF: "mt3620.json"
      MODEL_NAME: "RS485"
      SERIES_NAME: "cactusphere_100"
      INFO_FILE: "hash.txt"

    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: tools
      run: |
        pip3 install end
        python3 --version
        sudo apt-get install -y net-tools curl ninja-build tree

    - name: install-sdk
      run: |
        wget -nv https://aka.ms/AzureSphereSDKInstall/Linux -O install.sh
        chmod +x install.sh
        yes Y | sudo ./install.sh

    - name: install-arm-rt-toolchain
      run: |
        wget -nv ${ARM_TOOLCHAIN_URL} -O tc.tar.bz2
        tar xf tc.tar.bz2 --strip-components=1

    - name: build-hlapp
      run: |
        cd ${HL_PROJECT_DIR}
        mkdir ${CMAKE_DIR}
        cd ${CMAKE_DIR}
        cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="/opt/azurespheresdk/CMakeFiles/AzureSphereToolchain.cmake" -DAZURE_SPHERE_TARGET_API_SET=${ARV} --no-warn-unused-cli -DPRODUCT=${PRODUCT} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_MAKE_PROGRAM="ninja" ../..
        ninja
      env:
        PROJECT: "HLApp_Cactusphere_100"
        PRODUCT: "atmarktechno_RS485_model"

    - name: build-rtapp
      run: |
        pwd
        cd ${RT_PROJECT_DIR}
        mkdir ${CMAKE_DIR}
        cd ${CMAKE_DIR}
        cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="/opt/azurespheresdk/CMakeFiles/AzureSphereRTCoreToolchain.cmake" -DAZURE_SPHERE_TARGET_API_SET=${ARV} -DARM_GNU_PATH="${GITHUB_WORKSPACE}" --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_MAKE_PROGRAM="ninja" ..
        ninja
        ls
      env:
        PROJECT: "RS485_RTApp"

    - name: build-initfw-hlapp
      run: |
        cd ${INIT_PROJECT_DIR_HL}
        mkdir ${CMAKE_DIR}
        cd ${CMAKE_DIR}
        cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="/opt/azurespheresdk/CMakeFiles/AzureSphereToolchain.cmake" -DAZURE_SPHERE_TARGET_API_SET=${ARV_INIT} --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_MAKE_PROGRAM="ninja" ..
        ninja
      env:
        PROJECT: "RS485InitialFirmware_HLApp"

    - name: build-initfw-rtapp
      run: |
        cd ${INIT_PROJECT_DIR_RT}
        mkdir ${CMAKE_DIR}
        cd ${CMAKE_DIR}
        cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="/opt/azurespheresdk/CMakeFiles/AzureSphereRTCoreToolchain.cmake" -DAZURE_SPHERE_TARGET_API_SET=${ARV_INIT} -DARM_GNU_PATH="${GITHUB_WORKSPACE}" --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_MAKE_PROGRAM="ninja" ..
        ninja
      env:
        PROJECT: "RS485InitialFirmware_RTApp"

    - name: collect-files
      run: |
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR} -p
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HL_DIR} -p
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_RT_DIR} -p
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_INIT_DIR} -p
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HW_DIR} -p
        cp ${GITHUB_WORKSPACE}/${HL_PROJECT_DIR}/${CMAKE_DIR}/${HL_ELF} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HL_DIR}/app
        cp ${GITHUB_WORKSPACE}/${HL_PROJECT_DIR}/app_manifest.json ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HL_DIR}/../
        cp ${GITHUB_WORKSPACE}/${RT_PROJECT_DIR}/${CMAKE_DIR}/${RT_ELF} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_RT_DIR}/app
        cp ${GITHUB_WORKSPACE}/${RT_PROJECT_DIR}/app_manifest.json ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_RT_DIR}/../
        cp ${GITHUB_WORKSPACE}/${HWDEF_DIR}/${HWDEF} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HW_DIR}
        cp ${GITHUB_WORKSPACE}/${INIT_PROJECT_DIR_HL}/${CMAKE_DIR}/${INIT_ELF_HL} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_INIT_DIR}
        cp ${GITHUB_WORKSPACE}/${INIT_PROJECT_DIR_RT}/${CMAKE_DIR}/${INIT_ELF_RT} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_INIT_DIR}
        tree ${GITHUB_WORKSPACE}/${RELEASE_DIR}

    - name: extract_info
      run: |
        echo Date: > ${GITHUB_WORKSPACE}/${INFO_FILE}
        date >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo Hashes: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        find ${GITHUB_WORKSPACE}/${RELEASE_DIR} -type f -print0 | sort -z | xargs -0 sha256sum >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_WORKFLOW: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_WORKFLOW} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_RUN_ID: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_RUN_ID} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_RUN_NUMBER: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_RUN_NUMBER} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_ACTION: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_ACTION} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_REPOSITORY: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_REPOSITORY} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_SHA: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_SHA} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_REF: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_REF} >> ${GITHUB_WORKSPACE}/${INFO_FILE}

    - name: set_date
      run: |
        DATE=`date "+%Y%m%d"`
        echo ::set-env name=DATE::$DATE

    - name: upload-package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.SERIES_NAME }}_${{ env.MODEL_NAME }}_${{ env.APP_VERSION }}${{ env.DATE }}
        path: ${{ env.RELEASE_DIR }}

    - name: upload-info
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.INFO_FILE }}
        path: ${{ env.INFO_FILE }}

name: ci-build-di

on:
  push:
    branches: [ master, dev ]
    tags:
      - 'DI_v*'
  pull_request:
    branches: [ master, dev ]

jobs:
  build:
    env:
      PRODUCT: "Cactusphere 110 接点入力モデル"
      CMAKE_DIR: build
      RELEASE_DIR: "release"
      RELEASE_HL_DIR: "HLApp/bin"
      RELEASE_RT_DIR: "RTApp/bin"
      RELEASE_INIT_DIR: "InitFW"
      RELEASE_HW_DIR: "HW"
      ARM_TOOLCHAIN_URL: "https://developer.arm.com/-/media/Files/downloads/gnu-rm/9-2020q2/gcc-arm-none-eabi-9-2020-q2-update-x86_64-linux.tar.bz2"
      BUILD_TYPE: "Debug"
      HL_PROJECT_DIR: "Firmware/HLApp/Cactusphere_100/atmarktechno_DI_model"
      RT_PROJECT_DIR: "Firmware/RTApp/DI"
      INIT_PROJECT_DIR: "InitialFirmware/DIInitialFirmware"
      HWDEF_DIR: "Firmware/HLApp/Cactusphere_100/Hardware/mt3620"
      HL_ELF: "HLApp_Cactusphere_100.out"
      RT_ELF: "DI_RTApp.out"
      INIT_ELF: "DIInitialFirmware.imagepackage"
      HWDEF: "mt3620.json"
      MODEL_NAME: "DI"
      SERIES_NAME: "cactusphere_110"
      INFO_FILE: "hash.txt"
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: tools
      run: |
        pip3 install end
        python3 --version
        sudo apt-get install -y net-tools curl ninja-build tree

    - name: get-build-args
      run: |
        SDK=$(cat Firmware/HLApp/Cactusphere_100/CMakeLists.txt | grep azsphere_configure_tools | sed -e "s/^.*\"\(.*\)\".*$/\1/")
        ARV=$(cat Firmware/HLApp/Cactusphere_100/CMakeLists.txt | grep azsphere_configure_api | sed -e "s/^.*\"\(.*\)\".*$/\1/")
        ARV_INIT=$(cat ${INIT_PROJECT_DIR}/CMakeLists.txt | grep azsphere_configure_api | sed -e "s/^.*\"\(.*\)\".*$/\1/")
        echo "SDK=$SDK" >> $GITHUB_ENV
        echo "ARV=$ARV" >> $GITHUB_ENV
        echo "ARV_INIT=$ARV_INIT" >> $GITHUB_ENV

    - name: install-sdk
      run: |
        wget -nv https://aka.ms/AzureSphereSDKInstall/Linux -O install_azure_sphere_sdk.tar.gz
        tar xf install_azure_sphere_sdk.tar.gz
        chmod +x install_azure_sphere_sdk.sh
        yes Y | sudo ./install_azure_sphere_sdk.sh

    - name: install-arm-rt-toolchain
      run: |
        wget -nv ${ARM_TOOLCHAIN_URL} -O tc.tar.bz2
        tar xf tc.tar.bz2 --strip-components=1

    - name: build-hlapp
      run: |
        cd ${HL_PROJECT_DIR}
        mkdir ${CMAKE_DIR}
        cd ${CMAKE_DIR}
        cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="/opt/azurespheresdk/CMakeFiles/AzureSphereToolchain.cmake" -DAZURE_SPHERE_TARGET_API_SET=${ARV} --no-warn-unused-cli -DPRODUCT=${PRODUCT} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_MAKE_PROGRAM="ninja" ../..
        ninja
      env:
        PROJECT: "HLApp_Cactusphere_100"
        PRODUCT: "atmarktechno_DI_model"

    - name: build-rtapp
      run: |
        pwd
        cd ${RT_PROJECT_DIR}
        mkdir ${CMAKE_DIR}
        cd ${CMAKE_DIR}
        cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="/opt/azurespheresdk/CMakeFiles/AzureSphereRTCoreToolchain.cmake" -DAZURE_SPHERE_TARGET_API_SET=${ARV} -DARM_GNU_PATH="${GITHUB_WORKSPACE}" --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_MAKE_PROGRAM="ninja" ..
        ninja
        ls
      env:
        PROJECT: "DI_RTApp"

    - name: build-initfw
      run: |
        cd ${INIT_PROJECT_DIR}
        mkdir ${CMAKE_DIR}
        cd ${CMAKE_DIR}
        cmake -G "Ninja" -DCMAKE_TOOLCHAIN_FILE="/opt/azurespheresdk/CMakeFiles/AzureSphereToolchain.cmake" -DAZURE_SPHERE_TARGET_API_SET=${ARV_INIT} --no-warn-unused-cli -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_MAKE_PROGRAM="ninja" ..
        ninja
      env:
        PROJECT: "DIInitialFirmware"

    - name: collect-files
      run: |
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR} -p
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HL_DIR} -p
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_RT_DIR} -p
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_INIT_DIR} -p
        mkdir ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HW_DIR} -p
        cp ${GITHUB_WORKSPACE}/${HL_PROJECT_DIR}/${CMAKE_DIR}/${HL_ELF} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HL_DIR}/app
        cp ${GITHUB_WORKSPACE}/${HL_PROJECT_DIR}/app_manifest.json ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HL_DIR}/../
        cp ${GITHUB_WORKSPACE}/${RT_PROJECT_DIR}/${CMAKE_DIR}/${RT_ELF} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_RT_DIR}/app
        cp ${GITHUB_WORKSPACE}/${RT_PROJECT_DIR}/app_manifest.json ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_RT_DIR}/../
        cp ${GITHUB_WORKSPACE}/${HWDEF_DIR}/${HWDEF} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_HW_DIR}
        cp ${GITHUB_WORKSPACE}/${INIT_PROJECT_DIR}/${CMAKE_DIR}/${INIT_ELF} ${GITHUB_WORKSPACE}/${RELEASE_DIR}/${RELEASE_INIT_DIR}
        tree ${GITHUB_WORKSPACE}/${RELEASE_DIR}

    - name: extract_info
      run: |
        echo Date: > ${GITHUB_WORKSPACE}/${INFO_FILE}
        date >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo Hashes: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        find ${GITHUB_WORKSPACE}/${RELEASE_DIR} -type f -print0 | sort -z | xargs -0 sha256sum >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_WORKFLOW: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_WORKFLOW} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_RUN_ID: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_RUN_ID} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_RUN_NUMBER: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_RUN_NUMBER} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_ACTION: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_ACTION} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_REPOSITORY: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_REPOSITORY} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_SHA: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_SHA} >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo GITHUB_REF: >> ${GITHUB_WORKSPACE}/${INFO_FILE}
        echo ${GITHUB_REF} >> ${GITHUB_WORKSPACE}/${INFO_FILE}

    - name: set_archive_name
      if: false == startsWith( github.ref, 'refs/tags/DI_v' )
      run: |
        TODAY=$(date "+%y%m%d")
        VERSION=$(echo v$TODAY)
        echo "ARCHIVE_NAME=${SERIES_NAME}_${MODEL_NAME}_${VERSION}" >> $GITHUB_ENV

    - name: set_release_file_name
      if: startsWith( github.ref, 'refs/tags/DI_v' )
      run: |
        VERSION=$(echo ${{ github.ref }} | awk '{print substr($0, index($0, "v"))}')
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "ARCHIVE_NAME=${SERIES_NAME}_${MODEL_NAME}_${VERSION}" >> $GITHUB_ENV
        DEV_TEMPLATE=$(ls DeviceTemplate/DI/Cactusphere_DImodel_DeviceTemplate*.json)
        echo "DEVICE_TEMPLATE_NAME=$(basename $DEV_TEMPLATE)" >> $GITHUB_ENV
        echo "DEVICE_TEMPLATE_PATH=$DEV_TEMPLATE" >> $GITHUB_ENV

    - name: create-release
      id: create_release
      if: startsWith( github.ref, 'refs/tags/DI_v' )
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ env.PRODUCT }} ${{ env.VERSION }}
        body: |
          **${{ env.PRODUCT }} ${{ env.VERSION }}**
          ---

          - 対応内容
              - ***
          - リリースファイル構成
              -  Cactusphere ファームウェア
                  - ${{ env.ARCHIVE_NAME }}.zip
          Application Runtime Vesrion :　"${{ env.ARV }}"
          ※ HLAppのimagepackage 作成時に必要となります

              - Azure IoT Central デバイステンプレート
                  - ${{ env.DEVICE_TEMPLATE_NAME }}
              - Azure IoT Central アプリケーションテンプレート
                  - ***

          - 対応OS/SDK
              - Azure Sphere OS
                  - ${{ env.SDK }}
              - Azure Sphere SDK
                  - ${{ env.SDK }}
        draft: true
        prerelease: false

    - name: archive-zip
      if: startsWith( github.ref, 'refs/tags/DI_v' )
      run: |
        cp -r ${{ env.RELEASE_DIR }} $ARCHIVE_NAME
        zip -r $ARCHIVE_NAME.zip $ARCHIVE_NAME
    - name: upload-package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{ env.RELEASE_DIR }}

    - name: upload-info
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.INFO_FILE }}
        path: ${{ env.INFO_FILE }}

    - name: upload-release-asset
      if: startsWith( github.ref, 'refs/tags/DI_v' )
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_NAME }}.zip
        asset_name: ${{ env.ARCHIVE_NAME }}.zip
        asset_content_type: application/zip

    - name: upload-release-asset
      if: startsWith( github.ref, 'refs/tags/DI_v' )
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.DEVICE_TEMPLATE_PATH }}
        asset_name: ${{ env.DEVICE_TEMPLATE_NAME }}
        asset_content_type: application/json
